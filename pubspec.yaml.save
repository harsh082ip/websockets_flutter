name: Sure! Renaming a Flutter project involves a few steps. Here's how you can rename your Flutter project from `websockets-golang` to `websockets-flutter`:

1. **Rename the Project Directory:**
   First, navigate to the directory containing your Flutter project. Then, rename the directory from `websockets-golang` to `websockets-flutter`. If you're using a command-line interface, you can use the `mv` command:
   ```
   mv websockets-golang websockets-flutter
   ```

2. **Update the `pubspec.yaml` File:**
   Open the `pubspec.yaml` file located in the root directory of your Flutter project (`websockets-flutter`). Change the `name` field to `websockets_flutter`:
   ```yaml
   name: websockets_flutter
   ```

3. **Update Android Package Name (Optional):**
   If you're using Android, you might want to update the package name in the Android manifest file. Navigate to the `android/app/src/main/AndroidManifest.xml` file and update the `package` attribute in the `<manifest>` tag:
   ```xml
   package="com.example.websockets_flutter"
   ```

4. **Update iOS Bundle Identifier (Optional):**
   If you're using iOS, you might want to update the bundle identifier. Navigate to the `ios/Runner.xcodeproj/project.pbxproj` file and update the `PRODUCT_BUNDLE_IDENTIFIER`:
   ```
   PRODUCT_BUNDLE_IDENTIFIER = com.example.websockets_flutter;
   ```

5. **Update Git Remote (Optional):**
   If your project is under version control with Git and you want to update the remote repository URL, you can use the following command:
   ```
   git remote set-url origin <new-remote-url>
   ```

6. **Update Import Statements (Optional):**
   If your project contains any import statements or references to the old project name (`websockets-golang`), you may need to update them to `websockets-flutter`.

7. **Update Project Configuration (Optional):**
   Depending on your project setup and any additional configurations you might have, you may need to update other project-specific configurations.

After completing these steps, your Flutter project should be successfully renamed to `websockets-flutter`. Remember to update any references or configurations accordingly, especially if you're using version control or building platform-specific configurations.
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=3.2.6 <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2
  web_socket_channel: ^2.4.0
  http: ^1.2.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
